

import net.jpmchase.payroll.product.model.EmployeeOnboardingRequest;
import net.jpmchase.payroll.product.model.PayeeInformation;

public class OnboardingMapper {

    public static PayeeInformation toPayeeInformation(EmployeeOnboardingRequest request) {
        PayeeInformation payeeInfo = new PayeeInformation();
        payeeInfo.setFirstName(request.getFirstName());
        payeeInfo.setLastName(request.getLastName());
        payeeInfo.setPayeeType(request.getPayeeType());
        payeeInfo.setEmail(request.getEmail());
        payeeInfo.setPhoneNumber(request.getPhoneNumber());
        payeeInfo.setAddress(request.getAddress());
        // Map other fields as necessary
        return payeeInfo;
    }
}
package net..payroll.product.controller;

import net..payroll.product.model.PayeeOnboardingResponse;
import net..payroll.product.service.EmployeeOnboardingStatusService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

class EmployeeOnboardingStatusControllerTest {

    private MockMvc mockMvc;

    @Mock
    private EmployeeOnboardingStatusService onboardingStatusService;

    @InjectMocks
    private EmployeeOnboardingStatusController onboardingStatusController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(onboardingStatusController).build();
    }

    @Test
    void testAddOnboardingStatus() throws Exception {
        UUID employeeId = UUID.randomUUID();
        String cibToken = "test-cib-token";

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Success");

        // Mocking service call
        when(onboardingStatusService.addOnboardingStatus(eq(employeeId), any(), eq(cibToken)))
                .thenReturn(response);

        String requestPayload = """
            {
                "onboardingStatus": "admin_onboarding_incomplete",
                "additionalDetails": "Test Details"
            }
            """;

        // Perform POST request
        mockMvc.perform(post("/employees/{employee_id}/onboarding_status/add", employeeId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .header("cibToken", cibToken)
                        .content(requestPayload))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("Success"));

        // Verify service interaction
        verify(onboardingStatusService, times(1)).addOnboardingStatus(eq(employeeId), any(), eq(cibToken));
    }

    @Test
    void testUpdateOnboardingStatus() throws Exception {
        UUID employeeId = UUID.randomUUID();
        String cibToken = "test-cib-token";

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Updated");

        // Mocking service call
        when(onboardingStatusService.updateOnboardingStatus(eq(employeeId), any(), eq(cibToken)))
                .thenReturn(response);

        String requestPayload = """
            {
                "onboardingStatus": "self_onboarding_completed",
                "additionalDetails": "Update Test"
            }
            """;

        // Perform PUT request
        mockMvc.perform(put("/employees/{employee_id}/onboarding_status/update", employeeId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .header("cibToken", cibToken)
                        .content(requestPayload))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("Updated"));

        // Verify service interaction
        verify(onboardingStatusService, times(1)).updateOnboardingStatus(eq(employeeId), any(), eq(cibToken));
    }
}

package net..payroll.product.controller;

import net..payroll.product.model.PayeeOnboardingResponse;
import net..payroll.product.model.PayeeOnboardingRequest;
import net..payroll.product.service.EmployeeOnboardingStatusService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

class ContractorOnboardingStatusControllerTest {

    private MockMvc mockMvc;

    @Mock
    private EmployeeOnboardingStatusService onboardingStatusService;

    @InjectMocks
    private ContractorOnboardingStatusController contractorOnboardingStatusController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(contractorOnboardingStatusController).build();
    }

    @Test
    void testGetOnboardingStatus() throws Exception {
        UUID contractorId = UUID.randomUUID();
        String cibToken = "test-cib-token";

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Onboarding Pending");

        // Mock service behavior
        when(onboardingStatusService.getOnboardingStatus(contractorId, cibToken))
                .thenReturn(response);

        // Perform GET request
        mockMvc.perform(get("/contractor/{contractor_id}/onboarding_status", contractorId)
                        .header("cibToken", cibToken)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("Onboarding Pending"));

        // Verify service interaction
        verify(onboardingStatusService, times(1)).getOnboardingStatus(contractorId, cibToken);
    }

    @Test
    void testAddOnboardingStatus() throws Exception {
        UUID contractorId = UUID.randomUUID();
        String cibToken = "test-cib-token";

        PayeeOnboardingRequest request = new PayeeOnboardingRequest();
        request.setOnboardingStatus("admin_onboarding_incomplete");

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Success");

        // Mock service behavior
        when(onboardingStatusService.addOnboardingStatus(eq(contractorId), any(), eq(cibToken)))
                .thenReturn(response);

        String requestPayload = """
            {
                "onboardingStatus": "admin_onboarding_incomplete",
                "additionalDetails": "Test Contractor Details"
            }
            """;

        // Perform POST request
        mockMvc.perform(post("/contractor/{contractor_id}/onboarding_status/add", contractorId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .header("cibToken", cibToken)
                        .content(requestPayload))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("Success"));

        // Verify service interaction
        verify(onboardingStatusService, times(1)).addOnboardingStatus(eq(contractorId), any(), eq(cibToken));
    }

    @Test
    void testUpdateOnboardingStatus() throws Exception {
        UUID contractorId = UUID.randomUUID();
        String cibToken = "test-cib-token";

        PayeeOnboardingRequest request = new PayeeOnboardingRequest();
        request.setOnboardingStatus("self_onboarding_completed");

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Updated");

        // Mock service behavior
        when(onboardingStatusService.updateOnboardingStatus(eq(contractorId), any(), eq(cibToken)))
                .thenReturn(response);

        String requestPayload = """
            {
                "onboardingStatus": "self_onboarding_completed",
                "additionalDetails": "Update Contractor Details"
            }
            """;

        // Perform PUT request
        mockMvc.perform(put("/contractor/{contractor_id}/onboarding_status/update", contractorId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .header("cibToken", cibToken)
                        .content(requestPayload))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("Updated"));

        // Verify service interaction
        verify(onboardingStatusService, times(1)).updateOnboardingStatus(eq(contractorId), any(), eq(cibToken));
    }
}

package net..payroll.product.controller;

import net..payroll.product.model.SendInviteRequest;
import net..payroll.product.model.SendInviteResponse;
import net..payroll.product.service.SendInviteService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.UUID;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

class SendInviteControllerTest {

    private MockMvc mockMvc;

    @Mock
    private SendInviteService sendInviteService;

    @InjectMocks
    private SendInviteController sendInviteController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(sendInviteController).build();
    }

    @Test
    void testSendInvite() throws Exception {
        UUID contractorId = UUID.randomUUID();
        String cibToken = "test-cib-token";

        SendInviteRequest request = new SendInviteRequest();
        request.setMessage("Please complete your onboarding.");
        request.setSubject("Onboarding Invitation");

        SendInviteResponse response = new SendInviteResponse();
        response.setStatus("Invitation Sent");

        // Mock service behavior
        when(sendInviteService.sendInvite(eq(contractorId), any(SendInviteRequest.class), eq(cibToken)))
                .thenReturn(response);

        String requestPayload = """
            {
                "subject": "Onboarding Invitation",
                "message": "Please complete your onboarding."
            }
            """;

        // Perform POST request
        mockMvc.perform(post("/contractor/{contractor_id}/send_invite", contractorId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .header("cibToken", cibToken)
                        .content(requestPayload))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("Invitation Sent"));

        // Verify service interaction
        verify(sendInviteService, times(1)).sendInvite(eq(contractorId), any(SendInviteRequest.class), eq(cibToken));
    }

    @Test
    void testSendInviteBadRequest() throws Exception {
        UUID contractorId = UUID.randomUUID();
        String cibToken = "test-cib-token";

        // Missing required fields in the request
        String invalidRequestPayload = """
            {
                "subject": ""
            }
            """;

        // Perform POST request with invalid payload
        mockMvc.perform(post("/contractor/{contractor_id}/send_invite", contractorId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .header("cibToken", cibToken)
                        .content(invalidRequestPayload))
                .andExpect(status().isBadRequest());

        // Verify that service was never called
        verify(sendInviteService, never()).sendInvite(any(), any(), any());
    }
}
package net.jpmchase.payroll.product.service;

import net.jpmchase.payroll.product.exception.BusinessException;
import net.jpmchase.payroll.product.model.PayeeInformation;
import net.jpmchase.payroll.product.model.PayeeOnboardingResponse;
import net.jpmchase.payroll.product.remote.CibGustoProxyClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ContractorOnboardingStatusServiceTest {

    @Mock
    private CibGustoProxyClient cibGustoProxyClient;

    @Mock
    private PayeeService payeeService;

    @InjectMocks
    private ContractorOnboardingStatusService contractorOnboardingStatusService;

    private final String cibHost = "https://api.gusto-demo.com";
    private final String cibVersion = "v1";
    private final String contractorOnboardingStatusEndpoint = "/contractor/{contractor_id}/onboarding_status";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetOnboardingStatus() throws Exception {
        UUID contractorId = UUID.randomUUID();
        String token = "test-cib-token";

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Onboarding Pending");

        String endpoint = cibHost + "/" + cibVersion + contractorOnboardingStatusEndpoint.replace("{contractor_id}", contractorId.toString());

        // Mocking behavior
        when(cibGustoProxyClient.get(endpoint, token)).thenReturn("{\"status\": \"Onboarding Pending\"}");
        when(cibGustoProxyClient.readValue(anyString(), eq(PayeeOnboardingResponse.class))).thenReturn(response);

        // Call the service method
        PayeeOnboardingResponse result = contractorOnboardingStatusService.getOnboardingStatus(contractorId, token);

        // Assertions
        assertNotNull(result);
        assertEquals("Onboarding Pending", result.getStatus());

        // Verify interactions
        verify(cibGustoProxyClient, times(1)).get(endpoint, token);
    }

    @Test
    void testAddOnboardingStatus() throws Exception {
        UUID contractorId = UUID.randomUUID();
        String token = "test-cib-token";
        PayeeInformation payeeInformation = new PayeeInformation();
        payeeInformation.setFirstName("John");
        payeeInformation.setLastName("Doe");

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Success");

        String endpoint = cibHost + "/" + cibVersion + contractorOnboardingStatusEndpoint.replace("{contractor_id}", contractorId.toString());

        // Mocking behavior
        doNothing().when(payeeService).saveOrUpdateEmployee(payeeInformation);
        when(cibGustoProxyClient.post(endpoint, token, payeeInformation)).thenReturn("{\"status\": \"Success\"}");
        when(cibGustoProxyClient.readValue(anyString(), eq(PayeeOnboardingResponse.class))).thenReturn(response);

        // Call the service method
        PayeeOnboardingResponse result = contractorOnboardingStatusService.addOnboardingStatus(contractorId, payeeInformation, token);

        // Assertions
        assertNotNull(result);
        assertEquals("Success", result.getStatus());

        // Verify interactions
        verify(payeeService, times(1)).saveOrUpdateEmployee(payeeInformation);
        verify(cibGustoProxyClient, times(1)).post(endpoint, token, payeeInformation);
    }

    @Test
    void testUpdateOnboardingStatus() throws Exception {
        UUID contractorId = UUID.randomUUID();
        String token = "test-cib-token";
        PayeeInformation payeeInformation = new PayeeInformation();
        payeeInformation.setFirstName("John");
        payeeInformation.setLastName("Doe");

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Updated");

        String endpoint = cibHost + "/" + cibVersion + contractorOnboardingStatusEndpoint.replace("{contractor_id}", contractorId.toString());

        // Mocking behavior
        when(cibGustoProxyClient.put(endpoint, token, payeeInformation)).thenReturn("{\"status\": \"Updated\"}");
        when(cibGustoProxyClient.readValue(anyString(), eq(PayeeOnboardingResponse.class))).thenReturn(response);

        // Call the service method
        PayeeOnboardingResponse result = contractorOnboardingStatusService.updateOnboardingStatus(contractorId, payeeInformation, token);

        // Assertions
        assertNotNull(result);
        assertEquals("Updated", result.getStatus());

        // Verify interactions
        verify(cibGustoProxyClient, times(1)).put(endpoint, token, payeeInformation);
    }

    @Test
    void testGetOnboardingStatus_Exception() {
        UUID contractorId = UUID.randomUUID();
        String token = "test-cib-token";

        String endpoint = cibHost + "/" + cibVersion + contractorOnboardingStatusEndpoint.replace("{contractor_id}", contractorId.toString());

        // Mock exception behavior
        when(cibGustoProxyClient.get(endpoint, token)).thenThrow(new RuntimeException("Service unavailable"));

        // Assertions
        Exception exception = assertThrows(BusinessException.class, () ->
                contractorOnboardingStatusService.getOnboardingStatus(contractorId, token));
        assertEquals("Unable to get Contractor Onboarding Status from Gusto.", exception.getMessage());

        // Verify interactions
        verify(cibGustoProxyClient, times(1)).get(endpoint, token);
    }
}
package net.jpmchase.payroll.product.service;

import net.jpmchase.payroll.product.exception.BusinessException;
import net.jpmchase.payroll.product.model.PayeeInformation;
import net.jpmchase.payroll.product.model.PayeeOnboardingResponse;
import net.jpmchase.payroll.product.remote.CibGustoProxyClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class EmployeeOnboardingStatusServiceTest {

    @Mock
    private CibGustoProxyClient cibGustoProxyClient;

    @Mock
    private PayeeService payeeService;

    @InjectMocks
    private EmployeeOnboardingStatusService employeeOnboardingStatusService;

    private final String cibHost = "https://api.gusto-demo.com";
    private final String cibVersion = "v1";
    private final String employeeOnboardingStatusEndpoint = "/employees/{employee_id}/onboarding_status";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetOnboardingStatus() throws Exception {
        UUID employeeId = UUID.randomUUID();
        String token = "test-cib-token";

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Onboarding Pending");

        String endpoint = cibHost + "/" + cibVersion + employeeOnboardingStatusEndpoint.replace("{employee_id}", employeeId.toString());

        // Mocking behavior
        when(cibGustoProxyClient.get(endpoint, token)).thenReturn("{\"status\": \"Onboarding Pending\"}");
        when(cibGustoProxyClient.readValue(anyString(), eq(PayeeOnboardingResponse.class))).thenReturn(response);

        // Call the service method
        PayeeOnboardingResponse result = employeeOnboardingStatusService.getOnboardingStatus(employeeId.toString(), token);

        // Assertions
        assertNotNull(result);
        assertEquals("Onboarding Pending", result.getStatus());

        // Verify interactions
        verify(cibGustoProxyClient, times(1)).get(endpoint, token);
    }

    @Test
    void testAddOnboardingStatus() throws Exception {
        UUID employeeId = UUID.randomUUID();
        String token = "test-cib-token";
        PayeeInformation payeeInformation = new PayeeInformation();
        payeeInformation.setFirstName("John");
        payeeInformation.setLastName("Doe");

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Success");

        String endpoint = cibHost + "/" + cibVersion + employeeOnboardingStatusEndpoint.replace("{employee_id}", employeeId.toString());

        // Mocking behavior
        doNothing().when(payeeService).saveOrUpdateEmployee(payeeInformation);
        when(cibGustoProxyClient.post(endpoint, token, payeeInformation)).thenReturn("{\"status\": \"Success\"}");
        when(cibGustoProxyClient.readValue(anyString(), eq(PayeeOnboardingResponse.class))).thenReturn(response);

        // Call the service method
        PayeeOnboardingResponse result = employeeOnboardingStatusService.addOnboardingStatus(employeeId, payeeInformation, token);

        // Assertions
        assertNotNull(result);
        assertEquals("Success", result.getStatus());

        // Verify interactions
        verify(payeeService, times(1)).saveOrUpdateEmployee(payeeInformation);
        verify(cibGustoProxyClient, times(1)).post(endpoint, token, payeeInformation);
    }

    @Test
    void testUpdateOnboardingStatus() throws Exception {
        UUID employeeId = UUID.randomUUID();
        String token = "test-cib-token";
        PayeeInformation payeeInformation = new PayeeInformation();
        payeeInformation.setFirstName("John");
        payeeInformation.setLastName("Doe");

        PayeeOnboardingResponse response = new PayeeOnboardingResponse();
        response.setStatus("Updated");

        String endpoint = cibHost + "/" + cibVersion + employeeOnboardingStatusEndpoint.replace("{employee_id}", employeeId.toString());

        // Mocking behavior
        when(cibGustoProxyClient.put(endpoint, token, payeeInformation)).thenReturn("{\"status\": \"Updated\"}");
        when(cibGustoProxyClient.readValue(anyString(), eq(PayeeOnboardingResponse.class))).thenReturn(response);

        // Call the service method
        PayeeOnboardingResponse result = employeeOnboardingStatusService.updateOnboardingStatus(employeeId, payeeInformation, token);

        // Assertions
        assertNotNull(result);
        assertEquals("Updated", result.getStatus());

        // Verify interactions
        verify(cibGustoProxyClient, times(1)).put(endpoint, token, payeeInformation);
    }

    @Test
    void testGetOnboardingStatus_Exception() {
        UUID employeeId = UUID.randomUUID();
        String token = "test-cib-token";

        String endpoint = cibHost + "/" + cibVersion + employeeOnboardingStatusEndpoint.replace("{employee_id}", employeeId.toString());

        // Mock exception behavior
        when(cibGustoProxyClient.get(endpoint, token)).thenThrow(new RuntimeException("Service unavailable"));

        // Assertions
        Exception exception = assertThrows(BusinessException.class, () ->
                employeeOnboardingStatusService.getOnboardingStatus(employeeId.toString(), token));
        assertEquals("Unable to get Employee Onboarding Status from Gusto.", exception.getMessage());

        // Verify interactions
        verify(cibGustoProxyClient, times(1)).get(endpoint, token);
    }
}
package net.jpmchase.payroll.product.service;

import net.jpmchase.payroll.product.exception.BusinessException;
import net.jpmchase.payroll.product.model.EmployeeSendInviteRequest;
import net.jpmchase.payroll.product.model.EmployeeSendInviteResponse;
import net.jpmchase.payroll.product.remote.CibGustoProxyClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class EmployeeSendInviteServiceTest {

    @Mock
    private CibGustoProxyClient cibGustoProxyClient;

    @InjectMocks
    private EmployeeSendInviteService employeeSendInviteService;

    private final String cibHost = "https://api.gusto-demo.com";
    private final String cibVersion = "v1";
    private final String employeeSendInviteEndpoint = "/employees/{employee_id}/send_invite";
    private final String employeeCancelInviteEndpoint = "/employees/{employee_id}/cancel_invite";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSendInviteToEmployee() throws Exception {
        String employeeId = "employee-123";
        String token = "test-cib-token";

        EmployeeSendInviteRequest request = new EmployeeSendInviteRequest();
        request.setMessage("Please complete your onboarding.");
        request.setSubject("Onboarding Invitation");

        EmployeeSendInviteResponse response = new EmployeeSendInviteResponse();
        response.setStatus("Success");

        String endpoint = cibHost + "/" + cibVersion + employeeSendInviteEndpoint.replace("{employee_id}", employeeId);

        // Mocking behavior
        when(cibGustoProxyClient.post(endpoint, token, request))
                .thenReturn("{\"status\": \"Success\"}");
        when(cibGustoProxyClient.readValue(anyString(), eq(EmployeeSendInviteResponse.class)))
                .thenReturn(response);

        // Call the service method
        EmployeeSendInviteResponse result = employeeSendInviteService.sendInviteToEmployee(employeeId, request, token);

        // Assertions
        assertNotNull(result);
        assertEquals("Success", result.getStatus());

        // Verify interactions
        verify(cibGustoProxyClient, times(1)).post(endpoint, token, request);
    }

    @Test
    void testCancelInviteForEmployeeToSelfOnboard() throws Exception {
        String employeeId = "employee-123";
        String token = "test-cib-token";

        EmployeeSendInviteRequest request = new EmployeeSendInviteRequest();
        request.setMessage("Cancel onboarding invite.");

        EmployeeSendInviteResponse response = new EmployeeSendInviteResponse();
        response.setStatus("Invite Canceled");

        String endpoint = cibHost + "/" + cibVersion + employeeCancelInviteEndpoint.replace("{employee_id}", employeeId);

        // Mocking behavior
        when(cibGustoProxyClient.delete(endpoint, token, request))
                .thenReturn("{\"status\": \"Invite Canceled\"}");
        when(cibGustoProxyClient.readValue(anyString(), eq(EmployeeSendInviteResponse.class)))
                .thenReturn(response);

        // Call the service method
        EmployeeSendInviteResponse result = employeeSendInviteService.cancelInviteForEmployeeToSelfOnboard(employeeId, request, token);

        // Assertions
        assertNotNull(result);
        assertEquals("Invite Canceled", result.getStatus());

        // Verify interactions
        verify(cibGustoProxyClient, times(1)).delete(endpoint, token, request);
    }

    @Test
    void testSendInviteToEmployee_Exception() {
        String employeeId = "employee-123";
        String token = "test-cib-token";

        EmployeeSendInviteRequest request = new EmployeeSendInviteRequest();
        request.setMessage("Please complete your onboarding.");
        request.setSubject("Onboarding Invitation");

        String endpoint = cibHost + "/" + cibVersion + employeeSendInviteEndpoint.replace("{employee_id}", employeeId);

        // Mocking exception
        when(cibGustoProxyClient.post(endpoint, token, request))
                .thenThrow(new RuntimeException("Service unavailable"));

        // Assertions
        Exception exception = assertThrows(BusinessException.class, () ->
                employeeSendInviteService.sendInviteToEmployee(employeeId, request, token));
        assertEquals("Unable to send invite to employee for onboarding.", exception.getMessage());

        // Verify interactions
        verify(cibGustoProxyClient, times(1)).post(endpoint, token, request);
    }

    @Test
    void testCancelInviteForEmployeeToSelfOnboard_Exception() {
        String employeeId = "employee-123";
        String token = "test-cib-token";

        EmployeeSendInviteRequest request = new EmployeeSendInviteRequest();
        request.setMessage("Cancel onboarding invite.");

        String endpoint = cibHost + "/" + cibVersion + employeeCancelInviteEndpoint.replace("{employee_id}", employeeId);

        // Mocking exception
        when(cibGustoProxyClient.delete(endpoint, token, request))
                .thenThrow(new RuntimeException("Service unavailable"));

        // Assertions
        Exception exception = assertThrows(BusinessException.class, () ->
                employeeSendInviteService.cancelInviteForEmployeeToSelfOnboard(employeeId, request, token));
        assertEquals("Unable to cancel onboarding invite to employee.", exception.getMessage());

        // Verify interactions
        verify(cibGustoProxyClient, times(1)).delete(endpoint, token, request);
    }
}

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.web.reactive.function.client.WebClient;

@Configuration
@Profile("local")
public class WebClientConfig {

    @Bean
    public WebClient c2ReactiveWebClient() {
        return WebClient.builder()
                .baseUrl("http://localhost:8080") // Change this to your mock server base URL
                .build();
    }
}

 spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create



