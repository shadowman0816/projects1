package net.jpmchase.payroll.event.aspect;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.jpmchase.payroll.event.model.PyrlEventLog;
import net.jpmchase.payroll.event.repository.PyrlEventLogRepository;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@Aspect
@Component
@RequiredArgsConstructor
@Slf4j
public class EventLogAspect {

    private final PyrlEventLogRepository eventLogRepository;
    private final ObjectMapper objectMapper;

    private static final int MAX_RETRIES = 3;
    private static final String SYSTEM_USER = "SYSTEM";

    @AfterReturning(value = "@annotation(LogEvent)", returning = "result")
    public void logSuccessEvent(JoinPoint joinPoint, Object result) {
        log.info("[EVENT-LOG] Processing success for method: {}", joinPoint.getSignature().getName());

        try {
            JsonNode jsonNode = parseJson(result);
            if (jsonNode == null) {
                log.warn("[EVENT-LOG] Skipping event log update: Unable to parse JSON from result.");
                return;
            }

            PyrlEventLog eventLog = createOrUpdateEventLog(jsonNode, "SUCCESS", 0, null);
            eventLogRepository.save(eventLog);
            log.info("[EVENT-LOG] Event logged successfully: EventID={}, EventType={}", eventLog.getSrcEvntId(), eventLog.getSrcEvntType());

        } catch (Exception e) {
            log.error("[EVENT-LOG] Error while logging success event for {}: {}", joinPoint.getSignature().getName(), e.getMessage(), e);
        }
    }

    @AfterThrowing(value = "@annotation(LogEvent)", throwing = "exception")
    public void logFailedEvent(JoinPoint joinPoint, Exception exception) {
        log.error("[EVENT-LOG] Exception occurred during event processing for method: {}", joinPoint.getSignature().getName(), exception);

        try {
            Optional<PyrlEventLog> existingLog = eventLogRepository.findTopByOrderByCreTsDesc();
            PyrlEventLog eventLog;

            if (existingLog.isPresent()) {
                eventLog = existingLog.get();
                int retryCount = eventLog.getRetryCount();

                if (retryCount < MAX_RETRIES) {
                    eventLog.setRetryCount(retryCount + 1);
                    eventLog.setSrcEvntSts("RETRYING");
                    log.info("[EVENT-LOG] Retrying event {} - Attempt {}/{}", eventLog.getSrcEvntId(), retryCount + 1, MAX_RETRIES);
                } else {
                    eventLog.setSrcEvntSts("PERMANENTLY_FAILED");
                    eventLog.setStatusRsn(exception.getMessage());
                    log.warn("[EVENT-LOG] Event {} permanently failed after {} retries", eventLog.getSrcEvntId(), MAX_RETRIES);
                }
                eventLog.setUpdtTs(LocalDateTime.now());
                eventLog.setUpdtUsrId(SYSTEM_USER);

            } else {
                eventLog = createOrUpdateEventLog(null, "FAILED", 1, exception.getMessage());
                log.info("[EVENT-LOG] Created new failed event log entry.");
            }

            eventLogRepository.save(eventLog);

        } catch (Exception e) {
            log.error("[EVENT-LOG] Error while logging failure for event: {}", joinPoint.getSignature().getName(), e);
        }
    }

    private JsonNode parseJson(Object result) {
        if (result == null) return null;
        try {
            return objectMapper.readTree(objectMapper.writeValueAsString(result));
        } catch (Exception e) {
            log.error("[EVENT-LOG] Error parsing JSON from result: {}", e.getMessage());
            return null;
        }
    }

    private PyrlEventLog createOrUpdateEventLog(JsonNode jsonNode, String status, int retryCount, String failureReason) {
        String eventUuid = getJsonField(jsonNode, "uuid", UUID.randomUUID().toString());
        String eventType = getJsonField(jsonNode, "event_type", "UNKNOWN");
        String resourceType = getJsonField(jsonNode, "resource_type", "UNKNOWN");
        String resourceUuid = getJsonField(jsonNode, "resource_uuid", UUID.randomUUID().toString());
        String entityType = getJsonField(jsonNode, "entity_type", "UNKNOWN");
        String entityUuid = getJsonField(jsonNode, "entity_uuid", UUID.randomUUID().toString());

        Optional<PyrlEventLog> existingLog = eventLogRepository.findBySrcEvntId(eventUuid);
        PyrlEventLog eventLog = existingLog.orElseGet(() -> PyrlEventLog.builder()
                .pyrlEvntLogId(UUID.randomUUID())
                .srcEvntId(eventUuid)
                .srcEvntType(eventType)
                .srcEvntTs(LocalDateTime.now())
                .resourceType(resourceType)
                .resourceId(resourceUuid)
                .entityType(entityType)
                .entityId(entityUuid)
                .creTs(LocalDateTime.now())
                .creUsrId(SYSTEM_USER)
                .build());

        eventLog.setSrcEvntSts(status);
        eventLog.setRetryCount(retryCount);
        eventLog.setStatus(status);
        eventLog.setStatusRsn(failureReason);
        eventLog.setUpdtTs(LocalDateTime.now());
        eventLog.setUpdtUsrId(SYSTEM_USER);

        return eventLog;
    }

    private String getJsonField(JsonNode jsonNode, String fieldName, String defaultValue) {
        return jsonNode != null && jsonNode.has(fieldName) ? jsonNode.get(fieldName).asText() : defaultValue;
    }
}
package net.jpmchase.payroll.event.aspect;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.jpmchase.payroll.event.model.PyrlEventLog;
import net.jpmchase.payroll.event.repository.PyrlEventLogRepository;
import org.aspectj.lang.JoinPoint;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EventLogAspectTest {

    @InjectMocks
    private EventLogAspect eventLogAspect;

    @Mock
    private PyrlEventLogRepository eventLogRepository;

    @Mock
    private JoinPoint joinPoint;

    @Mock
    private ObjectMapper objectMapper;

    private String validJson;
    private JsonNode validJsonNode;

    @BeforeEach
    void setup() throws Exception {
        validJson = "{ \"uuid\": \"123e4567-e89b-12d3-a456-426614174000\", " +
                "\"event_type\": \"bank_account.created\", " +
                "\"resource_type\": \"Company\", " +
                "\"resource_uuid\": \"456e7890-e89b-12d3-a456-426614174111\", " +
                "\"entity_type\": \"BankAccount\", " +
                "\"entity_uuid\": \"789e0123-e89b-12d3-a456-426614174222\" }";

        validJsonNode = new ObjectMapper().readTree(validJson);
        when(objectMapper.readTree(anyString())).thenReturn(validJsonNode);
    }

    /** ✅ Test Case: Logs a successful event */
    @Test
    void testLogSuccessEvent_NewEvent() {
        when(eventLogRepository.findBySrcEvntId(anyString())).thenReturn(Optional.empty());

        eventLogAspect.logSuccessEvent(joinPoint, validJson);

        ArgumentCaptor<PyrlEventLog> captor = ArgumentCaptor.forClass(PyrlEventLog.class);
        verify(eventLogRepository).save(captor.capture());

        PyrlEventLog savedLog = captor.getValue();
        assertEquals("SUCCESS", savedLog.getSrcEvntSts());
        assertEquals("bank_account.created", savedLog.getSrcEvntType());
        assertEquals("Company", savedLog.getResourceType());
        assertEquals("BankAccount", savedLog.getEntityType());
    }

    /** ✅ Test Case: Updates an existing event log */
    @Test
    void testLogSuccessEvent_UpdateExistingEvent() {
        PyrlEventLog existingLog = new PyrlEventLog();
        existingLog.setSrcEvntId("123e4567-e89b-12d3-a456-426614174000");
        existingLog.setSrcEvntSts("PENDING");

        when(eventLogRepository.findBySrcEvntId(anyString())).thenReturn(Optional.of(existingLog));

        eventLogAspect.logSuccessEvent(joinPoint, validJson);

        verify(eventLogRepository).save(existingLog);
        assertEquals("SUCCESS", existingLog.getSrcEvntSts());
        assertEquals(0, existingLog.getRetryCount());
    }

    /** ✅ Test Case: Handles a failed event and retries */
    @Test
    void testLogFailedEvent_WithRetry() {
        PyrlEventLog existingLog = new PyrlEventLog();
        existingLog.setSrcEvntId("123e4567-e89b-12d3-a456-426614174000");
        existingLog.setSrcEvntSts("RETRYING");
        existingLog.setRetryCount(2);

        when(eventLogRepository.findTopByOrderByCreTsDesc()).thenReturn(Optional.of(existingLog));

        Exception simulatedException = new RuntimeException("Processing error");
        eventLogAspect.logFailedEvent(joinPoint, simulatedException);

        verify(eventLogRepository).save(existingLog);
        assertEquals("RETRYING", existingLog.getSrcEvntSts());
        assertEquals(3, existingLog.getRetryCount());
    }

    /** ✅ Test Case: Exceeds max retries and marks as permanently failed */
    @Test
    void testLogFailedEvent_MaxRetriesExceeded() {
        PyrlEventLog existingLog = new PyrlEventLog();
        existingLog.setSrcEvntId("123e4567-e89b-12d3-a456-426614174000");
        existingLog.setRetryCount(3);

        when(eventLogRepository.findTopByOrderByCreTsDesc()).thenReturn(Optional.of(existingLog));

        Exception simulatedException = new RuntimeException("Permanent failure");
        eventLogAspect.logFailedEvent(joinPoint, simulatedException);

        verify(eventLogRepository).save(existingLog);
        assertEquals("PERMANENTLY_FAILED", existingLog.getSrcEvntSts());
        assertEquals("Permanent failure", existingLog.getStatusRsn());
    }

    /** ✅ Test Case: Creates new failed log entry if no existing log found */
    @Test
    void testLogFailedEvent_NewFailureEvent() {
        when(eventLogRepository.findTopByOrderByCreTsDesc()).thenReturn(Optional.empty());

        Exception simulatedException = new RuntimeException("Processing failed");
        eventLogAspect.logFailedEvent(joinPoint, simulatedException);

        ArgumentCaptor<PyrlEventLog> captor = ArgumentCaptor.forClass(PyrlEventLog.class);
        verify(eventLogRepository).save(captor.capture());

        PyrlEventLog savedLog = captor.getValue();
        assertEquals("FAILED", savedLog.getSrcEvntSts());
        assertEquals("Processing failed", savedLog.getStatusRsn());
    }

    /** ✅ Test Case: Handles JSON parsing errors gracefully */
    @Test
    void testLogEvent_InvalidJson() throws Exception {
        when(objectMapper.readTree(anyString())).thenThrow(new RuntimeException("Invalid JSON"));

        eventLogAspect.logSuccessEvent(joinPoint, "invalid_json");

        verify(eventLogRepository, never()).save(any());
    }
}

