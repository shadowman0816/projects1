import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@Aspect
@Component
@RequiredArgsConstructor
@Slf4j
public class EventLogAspect {

    private final PyrlEventLogRepository eventLogRepository;
    private final ObjectMapper objectMapper; // Jackson ObjectMapper for JSON handling

    private static final int MAX_RETRIES = 3; // Define the max retry limit

    @AfterReturning(value = "@annotation(LogEvent)", returning = "result")
    public void logSuccessEvent(JoinPoint joinPoint, Object result) {
        log.info("Logging successful event for method: {}", joinPoint.getSignature().getName());

        try {
            JsonNode jsonNode = parseJson(result);
            if (jsonNode == null) {
                log.warn("Skipping event log update: Unable to parse JSON from result.");
                return;
            }

            // Extract fields dynamically
            String eventUuid = getJsonField(jsonNode, "uuid");
            String eventType = getJsonField(jsonNode, "event_type");
            String resourceType = getJsonField(jsonNode, "resource_type");
            String resourceUuid = getJsonField(jsonNode, "resource_uuid");
            String entityType = getJsonField(jsonNode, "entity_type");
            String entityUuid = getJsonField(jsonNode, "entity_uuid");

            // Check if the event already exists
            Optional<PyrlEventLog> existingLog = eventLogRepository.findBySrcEvntId(eventUuid);
            PyrlEventLog eventLog;

            if (existingLog.isPresent()) {
                // Update existing log
                eventLog = existingLog.get();
                eventLog.setSrcEvntSts("SUCCESS");
                eventLog.setRetryCount(0); // Reset retries after success
                eventLog.setUpdtTs(LocalDateTime.now());
                eventLog.setUpdtUsrId("SYSTEM");
                log.info("Updated existing Event Log for eventType: {}", eventType);
            } else {
                // Create new event log if not found
                eventLog = PyrlEventLog.builder()
                        .pyrlEvntLogId(UUID.randomUUID())
                        .srcEvntId(eventUuid != null ? eventUuid : UUID.randomUUID().toString())
                        .srcEvntType(eventType != null ? eventType : joinPoint.getSignature().getName())
                        .srcEvntSts("SUCCESS")
                        .retryCount(0)
                        .srcEvntTs(LocalDateTime.now())
                        .resourceType(resourceType != null ? resourceType : "UNKNOWN")
                        .resourceId(resourceUuid != null ? resourceUuid : UUID.randomUUID().toString())
                        .entityType(entityType != null ? entityType : "UNKNOWN")
                        .entityId(entityUuid != null ? entityUuid : UUID.randomUUID().toString())
                        .status("SUCCESS")
                        .statusRsn(null)
                        .creTs(LocalDateTime.now())
                        .creUsrId("SYSTEM")
                        .updtTs(LocalDateTime.now())
                        .updtUsrId("SYSTEM")
                        .build();
                log.info("New Event Log saved for eventType: {}", eventType);
            }

            // Save to database
            eventLogRepository.save(eventLog);

        } catch (Exception e) {
            log.error("Error while logging event for {}: {}", joinPoint.getSignature().getName(), e.getMessage(), e);
        }
    }

    @AfterThrowing(value = "@annotation(LogEvent)", throwing = "exception")
    public void logFailedEvent(JoinPoint joinPoint, Exception exception) {
        log.error("Exception occurred during event processing for method: {}", joinPoint.getSignature().getName(), exception);

        try {
            // Check if the event already exists
            Optional<PyrlEventLog> existingLog = eventLogRepository.findTopByOrderByCreTsDesc();
            PyrlEventLog eventLog;

            if (existingLog.isPresent()) {
                eventLog = existingLog.get();
                int retryCount = eventLog.getRetryCount();

                if (retryCount < MAX_RETRIES) {
                    // Retry the event processing
                    eventLog.setRetryCount(retryCount + 1);
                    eventLog.setSrcEvntSts("RETRYING");
                    log.info("Retrying event {} - Attempt {}/{}", eventLog.getSrcEvntId(), retryCount + 1, MAX_RETRIES);
                } else {
                    // Mark event as permanently failed
                    eventLog.setSrcEvntSts("PERMANENTLY_FAILED");
                    eventLog.setStatusRsn(exception.getMessage());
                    log.warn("Event {} permanently failed after {} retries", eventLog.getSrcEvntId(), MAX_RETRIES);
                }
                eventLog.setUpdtTs(LocalDateTime.now());
                eventLog.setUpdtUsrId("SYSTEM");

            } else {
                // If no event exists, create a new one with FAILED status
                eventLog = PyrlEventLog.builder()
                        .pyrlEvntLogId(UUID.randomUUID())
                        .srcEvntId(UUID.randomUUID().toString())
                        .srcEvntType(joinPoint.getSignature().getName())
                        .srcEvntSts("FAILED")
                        .retryCount(1) // First failure
                        .srcEvntTs(LocalDateTime.now())
                        .resourceType("UNKNOWN")
                        .resourceId(UUID.randomUUID().toString())
                        .entityType("UNKNOWN")
                        .entityId(UUID.randomUUID().toString())
                        .status("FAILED")
                        .statusRsn(exception.getMessage())
                        .creTs(LocalDateTime.now())
                        .creUsrId("SYSTEM")
                        .updtTs(LocalDateTime.now())
                        .updtUsrId("SYSTEM")
                        .build();
                log.info("Created new failed event log entry.");
            }

            eventLogRepository.save(eventLog);

        } catch (Exception e) {
            log.error("Error while logging failure for event: {}", joinPoint.getSignature().getName(), e);
        }
    }

    private JsonNode parseJson(Object result) {
        if (result == null) return null;
        try {
            return objectMapper.readTree(objectMapper.writeValueAsString(result));
        } catch (Exception e) {
            log.error("Error parsing JSON from result: {}", e.getMessage());
            return null;
        }
    }

    private String getJsonField(JsonNode jsonNode, String fieldName) {
        return jsonNode.has(fieldName) ? jsonNode.get(fieldName).asText() : null;
    }
}